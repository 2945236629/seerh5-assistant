{"version":3,"file":"LocalPetSkin.js","sources":["../src/LocalPetSkin.ts"],"sourcesContent":["import { NULL, Socket, createLocalStorageProxy } from 'sa-core';\r\n\r\nconst StorageKey = 'LocalSkin';\r\n\r\ninterface SkinInfo {\r\n    skinId: number;\r\n    petSkinId: number;\r\n}\r\n\r\nconst cloth = createLocalStorageProxy<{ changed: Map<number, SkinInfo>; original: Map<number, number> }>(\r\n    StorageKey,\r\n    { changed: new Map(), original: new Map() },\r\n    (data) => {\r\n        const clothData = {\r\n            changed: Array.from(data.changed.entries()),\r\n            original: Array.from(data.original.entries()),\r\n        };\r\n        return JSON.stringify(clothData);\r\n    },\r\n    (serialized) => {\r\n        const { changed, original } = JSON.parse(serialized);\r\n        return { changed: new Map(changed), original: new Map(original) };\r\n    }\r\n);\r\n\r\nclass LocalPetSkin implements SAMod.IBaseMod {\r\n    declare logger: typeof console.log;\r\n\r\n    meta: SAMod.MetaData = {\r\n        id: 'LocalPetSkin',\r\n        author: 'median',\r\n        type: 'base',\r\n        description: '本地全皮肤解锁',\r\n    };\r\n\r\n    activate() {\r\n        Object.defineProperty(FighterUserInfo.prototype, 'petInfoArr', {\r\n            set: function (t) {\r\n                const skinId = (r: PetInfo) => (this.id == MainManager.actorID ? r.skinId : r._skinId ?? 0);\r\n                this._petInfoArr = t;\r\n                this._petIDArr = [];\r\n                this._petCatchArr = [];\r\n                this._petSkillIDArr = [];\r\n                this._aliveNum = 0;\r\n                for (const r of this._petInfoArr) {\r\n                    const o = PetFightSkinSkillReplaceXMLInfo.getSkills(skinId(r), r.id);\r\n                    let id = r.id;\r\n                    id = PetIdTransform.getPetId(id, r.catchTime, !0);\r\n                    0 != skinId(r) && (id = PetSkinXMLInfo.getSkinPetId(skinId(r), r.id));\r\n                    this._petIDArr.push(id);\r\n                    this._petCatchArr.push(r.catchTime);\r\n                    for (const _ of r.skillArray) {\r\n                        if (_ instanceof PetSkillInfo) {\r\n                            this.add2List(this._petSkillIDArr, _.id, o);\r\n                        } else {\r\n                            this.add2List(this._petSkillIDArr, _, o);\r\n                        }\r\n                    }\r\n                    r.hideSKill && this.add2List(this._petSkillIDArr, r.hideSKill.id, o);\r\n                    r.hp > 0 && this._aliveNum++;\r\n                }\r\n            },\r\n        });\r\n\r\n        Object.defineProperty(FightPetInfo.prototype, 'skinId', {\r\n            get: function () {\r\n                return cloth.changed.has(this._petID) && this.userID == MainManager.actorID\r\n                    ? cloth.changed.get(this._petID)!.skinId\r\n                    : this._skinId ?? 0;\r\n            },\r\n        });\r\n\r\n        Object.defineProperty(PetInfo.prototype, 'skinId', {\r\n            get: function (this: PetInfo) {\r\n                return cloth.changed.has(this.id) ? cloth.changed.get(this.id)!.skinId : this._skinId ?? 0;\r\n            },\r\n        });\r\n\r\n        PetManager.equipSkin = async (catchTime, skinId = 0, callback = NULL) => {\r\n            const petInfo = PetManager.getPetInfo(catchTime);\r\n            this.logger('new skin id:', skinId, 'previous skin id:', petInfo.skinId);\r\n            if (skinId === 0 || PetSkinController.instance.haveSkin(skinId)) {\r\n                if (cloth.original.get(petInfo.id) !== skinId) {\r\n                    await Socket.sendByQueue(47310, [catchTime, skinId]);\r\n                } else {\r\n                    cloth.use(({ original }) => {\r\n                        original.delete(petInfo.id);\r\n                    });\r\n                }\r\n                cloth.use(({ changed }) => {\r\n                    changed.delete(petInfo.id);\r\n                });\r\n            } else {\r\n                cloth.use(({ original, changed }) => {\r\n                    if (!original.has(petInfo.id)) {\r\n                        original.set(petInfo.id, petInfo.skinId);\r\n                    }\r\n                    changed.set(petInfo.id, {\r\n                        skinId: skinId,\r\n                        petSkinId: PetSkinXMLInfo.getSkinPetId(skinId, petInfo.id),\r\n                    });\r\n                });\r\n            }\r\n            PetManager.dispatchEvent(new PetEvent(PetEvent.EQUIP_SKIN, catchTime, skinId));\r\n            callback();\r\n        };\r\n    }\r\n}\r\n\r\nexport default LocalPetSkin;\r\n"],"names":["StorageKey","cloth","data","clothData","serialized","changed","original","LocalPetSkin","__publicField","skinId","r","o","id","_","catchTime","callback","petInfo"],"mappings":"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"}